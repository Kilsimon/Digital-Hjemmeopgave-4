%% Hjemmeopgave 4
clc
close all
clear all
% Opgave 1:
T=1;
Nch=16;
m=0:Nch-1;
t=m*T/Nch;

% Her er p = n = 1
Sn=exp(1i*2*pi*t*1/T);
Sp=exp(1i*2*pi*t*(-1)/T);
sum(Sn.*Sp)*T/Nch;
% det ses at de ikke er ortogonale, da svaret er 1.

% Her er p = 2 og n = 1
Sn=exp(1i*2*pi*t*1/T);
Sp=exp(1i*2*pi*t*(-2)/T);
sum(Sn.*Sp)*T/Nch;
% det ses her at summen er meget lille og antages for at være nul.

%% Opg 2
% Del 1

% +-1
v=[0:16000];
a =(2*randi(2,1,length(v)-1)-3);
b =(2*randi(2,1,length(v)-1)-3);

% kompleks randomtalvektor 
V =a+1i*b;

a_k=reshape(V,16,1000);

% Opretter en vektor y_k med længde Nch*1000.
for k=1 : 1000
     y=sqrt(Nch)*ifft(a_k(:,k).');
     if k==1
         y_k=y;
     else
     y_k=[y_k,y];
     end
end
length(y_k)

%% Del 2

% m skal måske ændre navn.
m=16;

re_y_k=real(y_k);
im_y_k=imag(y_k);

a0=reshape([re_y_k;zeros(m-1,16000)],1,m*16000);
b0=reshape([im_y_k;zeros(m-1,16000)],1,m*16000);

f_c=32/T;
Ts=T/(Nch*m);
g=ones(1,m);

i=conv(g,a0);
q=conv(g,b0);

N=length(i)
length(q)
N/16

t=(1:N)*Ts;

v=i.*(cos(2*pi*f_c*t)*sqrt(2))+q.*(sin(2*pi*f_c*t)*sqrt(2));

plot(v(1:500))
pause



%% del 3
% Den ser således ud pga. den modulation vi har brugt på signalet
V=Ts*fft(v);
S=abs(V).^2;
f=(-N/2:N/2-1)/N/Ts;
plot(f,fftshift(S))

%% Opgave 3
%Del 1
% I og Q laves ud fra figuren i opgaven:
i = v.*(cos(2*pi*f_c*t)*sqrt(2));
q = v.*(sin(2*pi*f_c*t)*sqrt(2));

% Disse konverteres:
I = conv(g,i)/16;
Q = conv(g,q)/16;



for k=1:16000
   y(k)=I(k*16)+1j*Q(k*16); 
end

y2 = reshape(y,16,1000);
a_k_hat=zeros(16,1000);


for k=1:1000
   a_k_hat(:,k) = (1/sqrt(Nch)*fft(y2(:,k).')).' ;
end

figure
hold on

for k=1:1000 
plot(real(a_k_hat(k)),imag(a_k_hat(k)),'*')
end
title('Modtaget signal uden støj for 1000');
hold off
pause

%% del 2

fejl=0;
for k=1:16
    for j=1:1000
       a_b = a_k(k,j);
       a_b_hat = a_k_hat(k,j);
          if real(a_b)>0 && real(a_b_hat)<0
              fejl=fejl+1;
          
          else if  imag(a_b)>0 && imag(a_b_hat)<0
              fejl=fejl+1;
              
              else if imag(a_b)<0 && imag(a_b_hat)>0
                         fejl=fejl+1;
                  
                  else if real(a_b)<0 && real(a_b_hat)>0
                     fejl=fejl+1;
                      end
                  end
              end
          end
 
    
           
    end
end

fejl

figure
hold on

for k=1:1000 
plot(real(a_k_hat(k)),imag(a_k_hat(k)),'*')
plot(real(a_k(k)),imag(a_k(k)),'bO')
end
title('Sendt og modtaget signal uden støj for 1000');
hold off
pause
%% Opgave 4 

sigma = sqrt(5);

r = v + sigma*randn(1,length(v));

% I og Q laves ud fra figuren i opgaven:
i = r.*(cos(2*pi*f_c*t)*sqrt(2));
q = r.*(sin(2*pi*f_c*t)*sqrt(2));

% Disse konverteres:
I = conv(g,i)/16;
Q = conv(g,q)/16;



for k=1:16000
   y(k)=I(k*16)+1j*Q(k*16); 
end

y2 = reshape(y,16,1000);
a_k_hat=zeros(16,1000);


for k=1:1000
   a_k_hat(:,k) = (1/sqrt(Nch)*fft(y2(:,k).')).' ;
end

figure
hold on
fejl=0;
for k=1:16
    for j=1:1000
       a_b = a_k(k,j);
       a_b_hat = a_k_hat(k,j);
          if real(a_b)>0 && real(a_b_hat)<0
              fejl=fejl+1;
              plot(a_k_hat(k,j),'or')
          else if  imag(a_b)>0 && imag(a_b_hat)<0
              fejl=fejl+1;
              plot(a_k_hat(k,j),'or')
              else if imag(a_b)<0 && imag(a_b_hat)>0
                         fejl=fejl+1;
                         plot(a_k_hat(k,j),'or')
                  else if real(a_b)<0 && real(a_b_hat)>0
                     fejl=fejl+1;
                     plot(a_k_hat(k,j),'or')
                      else
                          plot(a_k_hat(k,j),'ob')
                      end
                  end
              end
          end
          
    
           
    end
end
hold off
fejl
pause


% Ca. 1100 fejl
%% Opgave 5
% Del 1
% +-1
v=[0:16000];
a =(2*randi(2,1,length(v)-1)-3);
b =(2*randi(2,1,length(v)-1)-3);

% kompleks randomtalvektor 
V =a+1i*b;

a_k=reshape(V,16,1000);

% for j=1:1000
%     ab1=a_k(1,j);
%     a_k(1,j)=real(ab1);
%     ab2=a_k(9,j);
%     a_k(9,j)=real(ab2);
% end

for k=2:1:Nch/2
    for j=1:1000
        ab2=a_k(18-k,j);
        ab1=a_k(k,j);
        a1=real(ab1);
        b1=imag(ab1);
        b2=imag(ab2);
        a_k(k,j)=a1+1i*b1+1i*b2;
    end
end

for k=2:1:Nch/2
    for j=1:1000
        ab1=a_k(k,j);
        a1=real(ab1);
        b1=imag(ab1);
        a_k(18-k,j)=a1-1i*b1;
    end
end

% Opretter en vektor y_k med længde Nch*1000.
for k=1 : 1000
     y=sqrt(Nch)*ifft(a_k(:,k).');
     if k==1
         y_k=y;
     else
     y_k=[y_k,y];
     end
end

re_y_k=real(y_k);
im_y_k=imag(y_k);

a0=reshape([re_y_k;zeros(m-1,16000)],1,m*16000);
b0=reshape([im_y_k;zeros(m-1,16000)],1,m*16000);

i=conv(g,a0);
q=conv(g,b0);

N=length(q)
sum(q)
sum(i)
